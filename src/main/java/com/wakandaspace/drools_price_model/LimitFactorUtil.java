package com.wakandaspace.drools_price_model;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class LimitFactorUtil implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	public LimitFactorUtil() {
	}

	public static java.util.List<com.wakandaspace.drools_price_model.LimitFactor> getLimitFactorsList = new java.util.ArrayList<com.wakandaspace.drools_price_model.LimitFactor>() {
		{
			add(new LimitFactor(800000.0, 0.7981, 0.9701, 0.78172));
			add(new LimitFactor(10000000.0, 1.0000, 0.9980, 0.99924));
			add(new LimitFactor(10000001.0, 1, 1, 1.0000));
		}
	};
	/**
	 * the function takes a limit as input and returns a limit factors object
	 */
	public static com.wakandaspace.drools_price_model.LimitFactor getFactorsPerLimit(
			double limit) {
		com.wakandaspace.drools_price_model.LimitFactor limitfactor = new com.wakandaspace.drools_price_model.LimitFactor();
		for (LimitFactor limitFactor : getLimitFactorsList) {
			if (limitFactor.getLimit() == limit) {
				limitfactor = limitFactor;
			}
			/**
			 * All the limits that are greater than 10.000000 have the same
			 * factors as the limit =10.000001 we verifie if the given limit is
			 * greater than 10000000 If this is a case we look if there is a
			 * limit that is equal to 10000001 and we set the limit of the
			 * object to the given limit and we return the object
			 */
			else {
				if (limit > 10000000) {
					if (limitFactor.getLimit() == 10000001) {
						limitFactor.setLimit(limit);
						limitfactor = limitFactor;
					}
				}
			}
		}
		return limitfactor;
	}
}