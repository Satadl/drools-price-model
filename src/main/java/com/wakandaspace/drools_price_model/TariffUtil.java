package com.wakandaspace.drools_price_model;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class TariffUtil implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	public TariffUtil() {
	}

	public static java.util.List<com.wakandaspace.drools_price_model.Tariff> getTariffsList = new java.util.ArrayList<com.wakandaspace.drools_price_model.Tariff>() {
		{
			add(new Tariff("Basic outpatient and in-patient Treatment", 2000.0,
					1500.0, 400.0, 400.0, 1250.0));
			add(new Tariff("Obstetrician", 150000.0, 100000.0, 26700.0,
					16700.0, 25.0));
			add(new Tariff("Dialysis and all related care", 225000.0, 220000.0,
					205000.0, 200000.0, 1.5));
		}
	};
	/**
	 * The function allows you to return a Tariff object according to a given
	 * benefit
	 */
	public static com.wakandaspace.drools_price_model.Tariff getFactorsPerBenefit(
			String benefit) {
		Tariff tarif = new Tariff();
		for (Tariff tariff : getTariffsList) {
			if (tariff.getBenefit().compareToIgnoreCase(benefit) == 0) {
				tarif = tariff;
			}
		}
		return tarif;
	}
	/**
	 * The function allows you to return the cost of a tiers according to the
	 * benefit and the tiers
	 */
	public static double getCost(String benefit, String hospitalTier) {
		double cost = 0;
		for (Tariff tariff : getTariffsList) {
			if (tariff.getBenefit().compareToIgnoreCase(benefit) == 0) {
				if (hospitalTier.equalsIgnoreCase("tier1")) {
					cost = tariff.getTier1();
				}
				if (hospitalTier.equalsIgnoreCase("tier2")) {
					cost = tariff.getTier2();
				}
				if (hospitalTier.equalsIgnoreCase("tier3")) {
					cost = tariff.getTier3();
				}
				if (hospitalTier.equalsIgnoreCase("tier4")) {
					cost = tariff.getTier4();
				}
			}
		}
		return cost;
	}
	/**
	 * The function allows you to return utilisation per 1000 according to the
	 * benefit
	 */
	public static double getUtilisationPerBenefit(String benefit) {
		double utilisation = 0;
		for (Tariff tariff : getTariffsList) {
			if (tariff.getBenefit().compareToIgnoreCase(benefit) == 0) {
				utilisation = tariff.getUtilisation();
			}
		}
		return utilisation;
	}

}